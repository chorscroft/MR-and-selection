// Number of children as output
// In this scenario, 3 genes lead to one phenotype, 3 genes lead to another, a 1 leads to both

// Initialise simulation parameters
initialize() {
   initializeSLiMOptions(keepPedigrees=T);       // remember who the parents are
   initializeMutationRate(1e-7);                // contstant mutation rate
   initializeMutationType("m1", 0.0, "f", 0.0); // neutral mutation
   initializeMutationType("m2", 0.0, "f", 0.0); // introduced selected mutation (phenotype1)
   initializeMutationType("m3", 0.0, "f", 0.0); // introduced selected mutation (pleiotropic)
   initializeMutationType("m4", 0.0, "f", 0.0); // introduced selected mutation (phenotype2)
   m2.convertToSubstitution = F;                // remember m2 even after it fixes
   m3.convertToSubstitution = F;                // remember m3 even after it fixes
   m4.convertToSubstitution = F;                // remember m4 even after it fixes
   initializeGenomicElementType("g1", m1, 1.0); // in g1 elements, mutations are always type m1 (neutral)
   initializeGenomicElement(g1, 0, 99999);      // create a g1 100,000 bp long

   rates = c(1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8, 0.5, 1e-8);
   ends = c(9999, 10000, 19999, 20000, 29999, 30000, 39999, 40000, 49999, 50000, 59999, 60000, 99999); 
   initializeRecombinationRate(rates, ends); 

   //initializeRecombinationRate(1e-8);           // constant recombination rate
   //initializeRecombinationRate(0.5);           // constant recombination rate
}

// set the fitness of m2, m3 and m4 to neutral (==1) 
// as it will be defined for each individual later
fitness(m2) { 
  return 1.0; 
} 
fitness(m3) { 
  return 1.0; 
} 
fitness(m4) { 
  return 1.0; 
} 
// start the simulation
1 { 
  // save this run's identifier, used to save and restore
  defineConstant("simID", getSeed()); 

  // Create binary variable that is true if it is the final generation
  sim.setValue("finalGen", F);
  
  // add a population of 10,000 individuals
  sim.addSubpop("p1", 10000); 
}

// each generation, set phenotypes and fitness for each individual
1: late() {
  // get individuals
  inds = sim.subpopulations.individuals; 
  
  // set phenotype1 as standard normal. Add 1 phenotype unit for each m2 and m3 variant present in either genome
  phenotype1 = rnorm(10000,0,1)+inds.countOfMutationsOfType(m2)+inds.countOfMutationsOfType(m3);

  // set phenotype2 as standard normal. Add 1 phenotype unit for each m3 and m4 variant present in either genome
  phenotype2 = rnorm(10000,0,1)+inds.countOfMutationsOfType(m3)+inds.countOfMutationsOfType(m4);

  i=0;
  for (ind in inds){
    ind.setValue("phenotype1",phenotype1[i]);
    ind.setValue("phenotype2",phenotype2[i]);
    i=i+1;
  }

  // set fitness as 1, adjusted for 
  // phenotype1 where one unit corresponds to a 0.05 uplift in fitness on average (0.01 SD)
  // phenotype2 where one unit corresponds to a 0.03 uplift in fitness on average (0.01 SD)
  // fitness effects are additive
  inds.fitnessScaling = exp(1+0.05*phenotype1+0.03*phenotype2+rnorm(10000,0,0.01));
} 

// in generation 2000 introduce a beneficial mutation into a random genome
// save the simulation in case the mutation is immediately lost
2000 late() {
  // save the state of the simulation
  sim.outputFull("/tmp/slim_" + simID + ".txt"); 
  
  // pick three random mutations to be m2, one to be m3, and three to be m4
  // mutations must have an allele frequency of at least 0.05
  muts = sim.mutations[sim.mutations.mutationType == m1];
  muts = muts[sim.mutationFrequencies(p1, muts) > 0.05]; 

  target = sample(muts[muts.position<10000],1);
  target.setMutationType(m2);
  target = sample(muts[muts.position>=10000 & muts.position<20000],1);
  target.setMutationType(m2);
  target = sample(muts[muts.position>=20000 & muts.position<30000],1);
  target.setMutationType(m2);
  target = sample(muts[muts.position>=30000 & muts.position<40000],1);
  target.setMutationType(m3);
  target = sample(muts[muts.position>=40000 & muts.position<50000],1);
  target.setMutationType(m4);
  target = sample(muts[muts.position>=50000 & muts.position<60000],1);
  target.setMutationType(m4);
  target = sample(muts[muts.position>=60000],1);
  target.setMutationType(m4);


  //targets = sample(muts, 7);
  //targets[0].setMutationType(m2);
  //targets[1].setMutationType(m2);
  //targets[2].setMutationType(m2);
  //targets[3].setMutationType(m3);
  //targets[4].setMutationType(m4);
  //targets[5].setMutationType(m4);
  //targets[6].setMutationType(m4);
}

// Check for simulation end conditions, max 100,000 generations
2000:100000 late() {
  
  // Check if this is the final generation
  if (sim.getValue("finalGen")==T){

    // If this is the final generation, write out parent file
    inds = sim.subpopulations.individuals; 
    lines="index parent1 parent2";
    if (!writeFile("parent.txt", lines))
      stop("Error writing parent file.");

    for(ind in inds){
      lines=paste(c(ind.pedigreeID,ind.pedigreeParentIDs));
      if (!writeFile("parent.txt", lines, append=T))
        stop("Error writing parent file.");
    }
    
    // end simulation
    sim.simulationFinished();    
  }
  else {
    // check that all mutations still exist
    mut2 = sim.mutationsOfType(m2); 
    mut3 = sim.mutationsOfType(m3); 
    mut4 = sim.mutationsOfType(m4); 
    if (size(mut2) == 3 & size(mut3) == 1 & size(mut4) == 3) {
      // count the number of individuals with at least one m2 or m3 mutation
      inds = sim.subpopulations.individuals;
      countHaveMut = sum(sapply(inds,"ifelse(applyValue.countOfMutationsOfType(m2)>0 | applyValue.countOfMutationsOfType(m3)>0,1,0);"));

      // if 90% of individuals possess at least one m2 or m3 mutation and all mutations are still over 5% frequncy
      if(countHaveMut/size(inds) >=0.9 & sum(sim.mutationFrequencies(NULL,mut2)>0.05)==3 & sim.mutationFrequencies(NULL,mut3)>0.05 & sum(sim.mutationFrequencies(NULL,mut4)>0.05)==3){  
        // print the current generation number
        cat("Generation: " + sim.generation + "\n");

        // write output.txt file
        // one row per individual in current generation containing their
        // pedigree ID, genotype, phenotype, and fitness
        lines = "index geno1 geno2 geno3 geno4 geno5 geno6 geno7 pheno1 pheno2 fit"; 
        if (!writeFile("output.txt", lines))
            stop("Error writing file.");

        for (ind in inds){
          lines = paste(c(asString(ind.pedigreeID),asInteger(ind.genome1.containsMutations(mut2))+asInteger(ind.genome2.containsMutations(mut2)),asInteger(ind.genome1.containsMutations(mut3))+asInteger(ind.genome2.containsMutations(mut3)),asInteger(ind.genome1.containsMutations(mut4))+asInteger(ind.genome2.containsMutations(mut4)),ind.getValue("phenotype1"),ind.getValue("phenotype2"),ind.fitnessScaling));
          if (!writeFile("output.txt", lines, append=T))
            stop("Error writing file.");
        }
           
        // Run one more generation to get the number of children
        sim.setValue("finalGen", T);
      }
    }
    else
    // one of the mutations has been lost to drift, rerun from generation 2000
    {
      // print warning
      cat(simID + ": LOST – RESTARTING\n");
  
      // go back to generation 2000
      sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
      // start a newly seeded run
      setSeed(rdunif(1, 0, asInteger(2^62) - 1));
      // re-introduce the sweep mutations
      // pick three random mutations to be m2, one to be m3, and three to be m4
      // mutations must have an allele frequency of at least 0.05
      muts = sim.mutations[sim.mutations.mutationType == m1];
      muts = muts[sim.mutationFrequencies(p1, muts) > 0.05]; 
      target = sample(muts[muts.position<10000],1);
      target.setMutationType(m2);
      target = sample(muts[muts.position>=10000 & muts.position<20000],1);
      target.setMutationType(m2);
      target = sample(muts[muts.position>=20000 & muts.position<30000],1);
      target.setMutationType(m2);
      target = sample(muts[muts.position>=30000 & muts.position<40000],1);
      target.setMutationType(m3);
      target = sample(muts[muts.position>=40000 & muts.position<50000],1);
      target.setMutationType(m4);
      target = sample(muts[muts.position>=50000 & muts.position<60000],1);
      target.setMutationType(m4);
      target = sample(muts[muts.position>=60000],1);
      target.setMutationType(m4);

      //targets = sample(muts, 7);
      //targets[0].setMutationType(m2);
      //targets[1].setMutationType(m2);
      //targets[2].setMutationType(m2);
      //targets[3].setMutationType(m3);
      //targets[4].setMutationType(m4);
      //targets[5].setMutationType(m4);
      //targets[6].setMutationType(m4);
    }
  }
} 

